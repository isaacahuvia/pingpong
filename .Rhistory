df$TasksSet <- as.numeric(df$Dailytasksset)
df$MilestonesSet <- as.numeric(df$Weeklymilestonesset)
#Tasks completed - include nullified tasks via (n)
df$TasksCompleted <- as.numeric(df$Dailytaskscompleted)
df$MilestonesCompleted <- as.numeric(sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 1))
df$MilestonesCompleted[is.na(df$MilestonesCompleted)] <- 0
df$MilestonesNullified <- sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 2)
df$MilestonesNullified[!is.na(df$MilestonesNullified)] <- sapply(strsplit(df$MilestonesNullified[!is.na(df$MilestonesNullified)], "\\)"), "[", 1)
df$MilestonesNullified[is.na(df$MilestonesNullified)] <- 0
df$MilestonesNullified <- as.numeric(df$MilestonesNullified)
#Hours
df$TotalHours <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 1))
df$HoursBreaked <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 2))
df$HoursWorked <- df$TotalHours - df$HoursBreaked
df <- df[,names(df) %in% c("Date", "Timestamp", "GutCheck", "TasksSet", "TasksCompleted", "MilestonesSet", "MilestonesCompleted", "MilestonesNullified", "TotalHours", "HoursWorked", "HoursBreaked")]
df <- df %>%
dplyr::mutate(TaskEfficiency = TasksCompleted / TasksSet,
MilestoneEfficiency = (MilestonesSet - MilestonesNullified) / MilestonesCompleted)
## Create weekly df - first week's Monday was 2017-01-02
dfWk <- df %>%
dplyr::mutate(wkOf = as.Date("2017-01-02") + (7 * ((as.numeric(Date) - as.numeric(as.Date("2017-01-02"))) %/% 7))) %>%
dplyr::group_by(wkOf) %>%
dplyr::summarise(DaysWorked = n(),
HoursWorked_Tot = sum(HoursWorked),
HoursBreaked_Tot = sum(HoursBreaked),
HoursPresent_Tot = sum(TotalHours),
GutCheck_Tot = sum(GutCheck),
TasksSet_Tot = sum(TasksSet),
TasksCompleted_Tot = sum(TasksCompleted),
MilestonesSet_Tot = sum(MilestonesSet),
MilestonesCompleted_Tot = sum(MilestonesCompleted)) %>%
dplyr::mutate(HoursWorked_Per = HoursWorked_Tot / DaysWorked,
HoursBreaked_Per = HoursBreaked_Tot / DaysWorked,
HoursPresent_Per = HoursPresent_Tot / DaysWorked,
GutCheck_Per = GutCheck_Tot / DaysWorked,
TasksSet_Per = TasksSet_Tot / DaysWorked,
TasksCompleted_Per = TasksCompleted_Tot / DaysWorked,
MilestonesSet_Per = MilestonesSet_Tot / DaysWorked,
MilestonesCompleted_Per = MilestonesCompleted_Tot / DaysWorked,
TaskEfficiency = TasksCompleted_Tot / TasksSet_Tot,
MilestoneEfficiency = MilestonesCompleted_Tot / MilestonesSet_Tot)
####  Visualization / Analysis  ####
#Table with daily, weekly summary statistics
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
HoursWk <- ggplot(data = dfWk) +
geom_line(aes(wkOf, HoursPresent_Tot / DaysWorked, color = "Total Hours")) +
geom_line(aes(wkOf, HoursWorked_Tot / DaysWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(dfWk$HoursPresent_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(dfWk$HoursWorked_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
# HoursWk
#Table with correlations/grouped means
#Graph changes over time
############################
##  Productivity Tracker  ##
############################
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
####  Cleaning  ####
if(names(df)[1] == "X1") {
names(df) <- gsub("[^a-zA-Z]", "", df[1,])
} else { #sometimes the column names are formatted weird in the scrape and need to be handled like this instead
names(df) <- gsub(" |\\(|\\)|-", "", df[2,])
df <- df[3:nrow(df),]
}
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
View(df)
############################
##  Productivity Tracker  ##
############################
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
names(df) <- gsub("[^a-zA-Z]", "", df[2,])
f[3:n]
df[3:n]
df[3:nrow(df),]
############################
##  Productivity Tracker  ##
############################
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
####  Cleaning  ####
if(names(df)[1] == "X1") {
names(df) <- gsub("[^a-zA-Z]", "", df[2,])
df <- df[3:nrow(df),]
} else { #sometimes the column names are formatted weird in the scrape and need to be handled like this instead
names(df) <- gsub(" |\\(|\\)|-", "", df[2,])
df <- df[3:nrow(df),]
} #If neither works, it's probably a formatting issue - go to the actual google sheet and make sure all cells are in plaintext format
############################
##  Productivity Tracker  ##
############################
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
####  Cleaning  ####
if(names(df)[1] == "X1") {
names(df) <- gsub("[^a-zA-Z]", "", df[2,])
df <- df[3:nrow(df),]
} else { #sometimes the column names are formatted weird in the scrape and need to be handled like this instead
names(df) <- gsub(" |\\(|\\)|-", "", df[2,])
df <- df[3:nrow(df),]
} #If neither works, it's probably a formatting issue - go to the actual google sheet and make sure all cells are in plaintext format
####  Create/reclass Variables  ####
#Date - from timestamp or manual date entry
df$Date <- as.Date(sapply(strsplit(df$Timestamp, " "), "[", 1), format = "%m/%d/%Y")
df$Date[nchar(df$Dateifnottoday) > 1] <- as.Date(df$Dateifnottoday[nchar(df$Dateifnottoday) > 1], format = "%m/%d/%Y") #using nchar since empty entries are neither NA nor an empty space, but some odd " " character that R can't quite make out
df$Timestamp <- sapply(strsplit(df$Timestamp, " "), "[", 2)
#Gutcheck
df$GutCheck <- as.numeric(df$Productivitygutcheck)
#Tasks set
df$TasksSet <- as.numeric(df$Dailytasksset)
df$MilestonesSet <- as.numeric(df$Weeklymilestonesset)
#Tasks completed - include nullified tasks via (n)
df$TasksCompleted <- as.numeric(df$Dailytaskscompleted)
df$MilestonesCompleted <- as.numeric(sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 1))
df$MilestonesCompleted[is.na(df$MilestonesCompleted)] <- 0
df$MilestonesNullified <- sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 2)
df$MilestonesNullified[!is.na(df$MilestonesNullified)] <- sapply(strsplit(df$MilestonesNullified[!is.na(df$MilestonesNullified)], "\\)"), "[", 1)
df$MilestonesNullified[is.na(df$MilestonesNullified)] <- 0
df$MilestonesNullified <- as.numeric(df$MilestonesNullified)
#Hours
df$TotalHours <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 1))
df$HoursBreaked <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 2))
df$HoursWorked <- df$TotalHours - df$HoursBreaked
df <- df[,names(df) %in% c("Date", "Timestamp", "GutCheck", "TasksSet", "TasksCompleted", "MilestonesSet", "MilestonesCompleted", "MilestonesNullified", "TotalHours", "HoursWorked", "HoursBreaked")]
df <- df %>%
dplyr::mutate(TaskEfficiency = TasksCompleted / TasksSet,
MilestoneEfficiency = (MilestonesSet - MilestonesNullified) / MilestonesCompleted)
## Create weekly df - first week's Monday was 2017-01-02
dfWk <- df %>%
dplyr::mutate(wkOf = as.Date("2017-01-02") + (7 * ((as.numeric(Date) - as.numeric(as.Date("2017-01-02"))) %/% 7))) %>%
dplyr::group_by(wkOf) %>%
dplyr::summarise(DaysWorked = n(),
HoursWorked_Tot = sum(HoursWorked),
HoursBreaked_Tot = sum(HoursBreaked),
HoursPresent_Tot = sum(TotalHours),
GutCheck_Tot = sum(GutCheck),
TasksSet_Tot = sum(TasksSet),
TasksCompleted_Tot = sum(TasksCompleted),
MilestonesSet_Tot = sum(MilestonesSet),
MilestonesCompleted_Tot = sum(MilestonesCompleted)) %>%
dplyr::mutate(HoursWorked_Per = HoursWorked_Tot / DaysWorked,
HoursBreaked_Per = HoursBreaked_Tot / DaysWorked,
HoursPresent_Per = HoursPresent_Tot / DaysWorked,
GutCheck_Per = GutCheck_Tot / DaysWorked,
TasksSet_Per = TasksSet_Tot / DaysWorked,
TasksCompleted_Per = TasksCompleted_Tot / DaysWorked,
MilestonesSet_Per = MilestonesSet_Tot / DaysWorked,
MilestonesCompleted_Per = MilestonesCompleted_Tot / DaysWorked,
TaskEfficiency = TasksCompleted_Tot / TasksSet_Tot,
MilestoneEfficiency = MilestonesCompleted_Tot / MilestonesSet_Tot)
####  Visualization / Analysis  ####
#Table with daily, weekly summary statistics
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
HoursWk <- ggplot(data = dfWk) +
geom_line(aes(wkOf, HoursPresent_Tot / DaysWorked, color = "Total Hours")) +
geom_line(aes(wkOf, HoursWorked_Tot / DaysWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(dfWk$HoursPresent_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(dfWk$HoursWorked_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
# HoursWk
#Table with correlations/grouped means
#Graph changes over time
############################
##  Productivity Tracker  ##
############################
rm(list = ls())
library(rvest); library(stringr); library(tidyr); library(selectr); library(xml2); library(dplyr); library(ggplot2)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
####  Scraping  ####
url <- "https://docs.google.com/spreadsheets/d/1cjNA3yivi-xY6uLaH-HAU1gL6Y40K0Hhd7d7NTisC6I/gviz/tq?tqx=out:html&tq&gid=1714148721"
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
df <- html_table(tables)[[1]]
rm(list = setdiff(ls(), c("df", "gg_color_hue")))
####  Cleaning  ####
if(names(df)[1] == "X1") {
names(df) <- gsub("[^a-zA-Z]", "", df[2,])
df <- df[3:nrow(df),]
} else { #sometimes the column names are formatted weird in the scrape and need to be handled like this instead
names(df) <- gsub(" |\\(|\\)|-", "", df[2,])
df <- df[3:nrow(df),]
} #If neither works, it's probably a formatting issue - go to the actual google sheet and make sure all cells are in plaintext format
####  Create/reclass Variables  ####
#Date - from timestamp or manual date entry
df$Date <- as.Date(sapply(strsplit(df$Timestamp, " "), "[", 1), format = "%m/%d/%Y")
df$Date[nchar(df$Dateifnottoday) > 1] <- as.Date(df$Dateifnottoday[nchar(df$Dateifnottoday) > 1], format = "%m/%d/%Y") #using nchar since empty entries are neither NA nor an empty space, but some odd " " character that R can't quite make out
df$Timestamp <- sapply(strsplit(df$Timestamp, " "), "[", 2)
#Gutcheck
df$GutCheck <- as.numeric(df$Productivitygutcheck)
#Tasks set
df$TasksSet <- as.numeric(df$Dailytasksset)
df$MilestonesSet <- as.numeric(df$Weeklymilestonesset)
#Tasks completed - include nullified tasks via (n)
df$TasksCompleted <- as.numeric(df$Dailytaskscompleted)
df$MilestonesCompleted <- as.numeric(sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 1))
df$MilestonesCompleted[is.na(df$MilestonesCompleted)] <- 0
df$MilestonesNullified <- sapply(strsplit(df$Weeklymilestonescompleted, "\\("), "[", 2)
df$MilestonesNullified[!is.na(df$MilestonesNullified)] <- sapply(strsplit(df$MilestonesNullified[!is.na(df$MilestonesNullified)], "\\)"), "[", 1)
df$MilestonesNullified[is.na(df$MilestonesNullified)] <- 0
df$MilestonesNullified <- as.numeric(df$MilestonesNullified)
#Hours
df$TotalHours <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 1))
df$HoursBreaked <- as.numeric(sapply(strsplit(gsub("\\(|\\)", "", df$Hoursworkedbreaks), " "), "[", 2))
df$HoursWorked <- df$TotalHours - df$HoursBreaked
df <- df[,names(df) %in% c("Date", "Timestamp", "GutCheck", "TasksSet", "TasksCompleted", "MilestonesSet", "MilestonesCompleted", "MilestonesNullified", "TotalHours", "HoursWorked", "HoursBreaked")]
df <- df %>%
dplyr::mutate(TaskEfficiency = TasksCompleted / TasksSet,
MilestoneEfficiency = (MilestonesSet - MilestonesNullified) / MilestonesCompleted)
## Create weekly df - first week's Monday was 2017-01-02
dfWk <- df %>%
dplyr::mutate(wkOf = as.Date("2017-01-02") + (7 * ((as.numeric(Date) - as.numeric(as.Date("2017-01-02"))) %/% 7))) %>%
dplyr::group_by(wkOf) %>%
dplyr::summarise(DaysWorked = n(),
HoursWorked_Tot = sum(HoursWorked),
HoursBreaked_Tot = sum(HoursBreaked),
HoursPresent_Tot = sum(TotalHours),
GutCheck_Tot = sum(GutCheck),
TasksSet_Tot = sum(TasksSet),
TasksCompleted_Tot = sum(TasksCompleted),
MilestonesSet_Tot = sum(MilestonesSet),
MilestonesCompleted_Tot = sum(MilestonesCompleted)) %>%
dplyr::mutate(HoursWorked_Per = HoursWorked_Tot / DaysWorked,
HoursBreaked_Per = HoursBreaked_Tot / DaysWorked,
HoursPresent_Per = HoursPresent_Tot / DaysWorked,
GutCheck_Per = GutCheck_Tot / DaysWorked,
TasksSet_Per = TasksSet_Tot / DaysWorked,
TasksCompleted_Per = TasksCompleted_Tot / DaysWorked,
MilestonesSet_Per = MilestonesSet_Tot / DaysWorked,
MilestonesCompleted_Per = MilestonesCompleted_Tot / DaysWorked,
TaskEfficiency = TasksCompleted_Tot / TasksSet_Tot,
MilestoneEfficiency = MilestonesCompleted_Tot / MilestonesSet_Tot)
####  Visualization / Analysis  ####
#Table with daily, weekly summary statistics
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
HoursWk <- ggplot(data = dfWk) +
geom_line(aes(wkOf, HoursPresent_Tot / DaysWorked, color = "Total Hours")) +
geom_line(aes(wkOf, HoursWorked_Tot / DaysWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(dfWk$HoursPresent_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(dfWk$HoursWorked_Tot / dfWk$DaysWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
# HoursWk
#Table with correlations/grouped means
#Graph changes over time
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[3]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursBreaked), color = gg_color_hue(2)[1])
ylim(0, 12)
Hours
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(2)[3]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(2)[2]) +
geom_hline(yintercept = mean(df$HoursBreaked), color = gg_color_hue(2)[1]) +
ylim(0, 12)
Hours
gg_color_hue(2)[3]
gg_color_hue(2)
gg_color_hue(3)
Hours <- ggplot(data = df) +
geom_line(aes(Date, TotalHours, color = "Total Hours")) +
geom_line(aes(Date, HoursWorked, color = "Hours Worked")) +
geom_line(aes(Date, HoursBreaked, color = "Hours Breaked")) +
geom_hline(yintercept = 7.5) +
geom_hline(yintercept = mean(df$TotalHours), color = gg_color_hue(3)[3]) +
geom_hline(yintercept = mean(df$HoursWorked), color = gg_color_hue(3)[2]) +
geom_hline(yintercept = mean(df$HoursBreaked), color = gg_color_hue(3)[1]) +
ylim(0, 12)
Hours
#Misc analysis
setwd("C:\\Users\\ahuvia\\Desktop\\Really Important Stuff\\App Final")
rm(list = ls())
library(shiny)
library(ggplot2)
library(shinyBS)
library(shinythemes)
library(dygraphs)
library(plotly)
library(DT)
library(shinydashboard)
## Prepare dfMatch and dfPoint
#These files load and save the datasets in order
source("1.1 Scrape Data.R")
source("1.2 Clean Scraped Data.R")
source("1.3 Create dfMatch.R")
source("1.4 Create dfPoint.R")
source("1.5 Update dfMatch.R")
##########################################################
dfMatch %>%
dplyr::filter(!is.na(NorthEndzone)) %>%
dplyr::group_by(NorthEndzone) %>%
dplyr::summarise(n = n(),
IsaacWinPct = mean(Winner == "Isaac", na.rm = T))
dfMatch %>%
dplyr::filter(!is.na(WonRally)) %>%
dplyr::group_by(WonRally) %>%
dplyr::summarise(n = n(),
IsaacWinPct = mean(Winner == "Isaac", na.rm = T))
dfMatch %>%
dplyr::filter(!is.na(TimeOfDay)) %>%
dplyr::group_by(TimeOfDay) %>%
dplyr::summarise(n = n(),
IsaacWinPct = mean(Winner == "Isaac", na.rm = T))
dfMatch %>%
dplyr::filter(!is.na(GameInDay)) %>%
dplyr::group_by(GameInDay) %>%
dplyr::summarise(n = n(),
IsaacWinPct = mean(Winner == "Isaac", na.rm = T))
##### Basketball Analytics #####
library(dplyr); library(ggplot2)
df <- rbind(
cbind(rep("2016-5-16", 5), c(rep(1, 4), c(rep(0, 1)))), #First part-week rolled in with second, since it only included 5 shots. Also this looks nicer
cbind(rep("2016-5-16", 20), c(rep(1, 8), c(rep(0, 12)))),
cbind(rep("2016-5-23", 31), c(rep(1, 20), c(rep(0, 11)))),
cbind(rep("2016-5-30", 15), c(rep(1, 11), c(rep(0, 4)))),
cbind(rep("2016-6-6", 28), c(rep(1, 15), c(rep(0, 13)))),
cbind(rep("2016-6-13", 15), c(rep(1, 13), c(rep(0, 2)))),
cbind(rep("2016-6-20", 14), c(rep(1, 9), c(rep(0, 5)))),
cbind(rep("2016-6-27", 27), c(rep(1, 21), c(rep(0, 6)))),
cbind(rep("2016-7-5", 16), c(rep(1, 13), c(rep(0, 3)))),
cbind(rep("2016-7-11", 18), c(rep(1, 12), c(rep(0, 6)))),
cbind(rep("2016-7-18", 15), c(rep(1, 9), c(rep(0, 6)))),
cbind(rep("2016-7-25", 20), c(rep(1, 13), c(rep(0, 7)))),
cbind(rep("2016-8-1", 16), c(rep(1, 11), c(rep(0, 5)))),
cbind(rep("2016-8-8", 28), c(rep(1, 24), c(rep(0, 4)))),
cbind(rep("2016-8-15", 30), c(rep(1, 23), c(rep(0, 7)))),
cbind(rep("2016-8-22", 28), c(rep(1, 21), c(rep(0, 7)))),
cbind(rep("2016-8-29", 22), c(rep(1, 19), c(rep(0, 3)))),
cbind(rep("2016-9-5", 10), c(rep(1, 4), c(rep(0, 6)))),
cbind(rep("2016-9-12", 18), c(rep(1, 12), c(rep(0, 6)))),
cbind(rep("2016-9-19", 58), c(rep(1, 46), c(rep(0, 12)))),
cbind(rep("2016-9-26", 52), c(rep(1, 35), c(rep(0, 17)))),
cbind(rep("2016-10-3", 28), c(rep(1, 20), c(rep(0, 8)))),
cbind(rep("2016-10-10", 11), c(rep(1, 8), c(rep(0, 3)))),
cbind(rep("2016-10-17", 15), c(rep(1, 15), c(rep(0, 0)))),
cbind(rep("2016-10-24", 24), c(rep(1, 22), c(rep(0, 2)))),
cbind(rep("2016-10-31", 26), c(rep(1, 20), c(rep(0, 6)))),
cbind(rep("2016-11-7", 25), c(rep(1, 22), c(rep(0, 3)))),
cbind(rep("2016-11-14", 32), c(rep(1, 26), c(rep(0, 6)))),
cbind(rep("2016-11-21", 25), c(rep(1, 18), c(rep(0, 7)))),
cbind(rep("2016-11-28", 24), c(rep(1, 21), c(rep(0, 3)))),
cbind(rep("2016-12-5", 17), c(rep(1, 11), c(rep(0, 6)))),
cbind(rep("2016-12-12", 24), c(rep(1, 16), c(rep(0, 8)))),
cbind(rep("2016-12-19", 21), c(rep(1, 15), c(rep(0, 6)))),
cbind(rep("2017-1-2", 21), c(rep(1, 16), c(rep(0, 5)))),
cbind(rep("2017-1-9", 19), c(rep(1, 15), c(rep(0, 4)))),
cbind(rep("2017-1-16", 50), c(rep(1, 40), c(rep(0, 10)))),
cbind(rep("2017-1-23", 16), c(rep(1, 12), c(rep(0, 4)))),
cbind(rep("2017-1-30", 33), c(rep(1, 23), c(rep(0, 10)))),
cbind(rep("2017-2-6", 29), c(rep(1, 20), c(rep(0, 9))))
) %>%
as.data.frame %>%
dplyr::rename(Date = V1, ShotLog = V2)
df$Date <- as.Date(df$Date)
df$ShotLog <- as.numeric(levels(df$ShotLog))[df$ShotLog]
df$ShotLogStr[df$ShotLog == 0] <- "Miss"
df$ShotLogStr[df$ShotLog == 1] <- "Make"
df$ShotsMadeTot <- 0
df$ShotsAttemptedTot <- 0
for(i in 1:length(df$Date)) {
if(i == 1) {
df$ShotsMadeTot[i] <- 1
df$ShotsAttemptedTot[i] <- 1
} else {
df$ShotsAttemptedTot[i] <- i
df$ShotsMadeTot[i] <- df$ShotsMadeTot[i-1]
if(df$ShotLog[i] == 1) {
df$ShotsMadeTot[i] <- df$ShotsMadeTot[i] + 1
}
}
}
df$ShootingPctCumulative <- df$ShotsMadeTot / df$ShotsAttemptedTot
df$ShootingPctCumulativeWk <- df$ShotsMadeTot / df$ShotsAttemptedTot
df$LastOfWk <- 0
df$FirstOfWk <- 0
df$FirstOfWk[duplicated(df$Date) == FALSE] <- 1
for(i in 1:length(df$Date)) {
if(i != length(df$Date)) {
df$LastOfWk[i] <- df$FirstOfWk[i+1]
} else {
df$LastOfWk[i] <- 1
}
}
df$ShootingPctCumulativeWk[!df$LastOfWk] <- NA
df2 <- df %>%
dplyr::group_by(Date, ShotLogStr) %>%
dplyr::summarise(n = n()) %>%
tidyr::spread(ShotLogStr, n) %>%
dplyr::mutate(TotalShotsWk = sum(Make, Miss, na.rm = T),
ShootingPctWk = Make / sum(Make, Miss, na.rm = T))
df <- merge(df, select(df2, ShootingPctWk, TotalShotsWk))
dfWk <- filter(df, LastOfWk == 1)
df2$WeekNum <- seq(1, length(df2$Date), by = 1)
lm <- lm(df2$ShootingPctWk ~ df2$WeekNum)
summary(lm)
lmW <- lm(df2$ShootingPctWk ~ df2$WeekNum, weights = df2$TotalShotsWk)
summary(lmW)
lmL <- lm(df2$ShootingPctWk ~ df2$WeekNum + log(df2$WeekNum), weights = df2$TotalShotsWk)
summary(lmL)
ggplot() +
geom_point(data = dfWk, aes(Date, ShootingPctWk, size = TotalShotsWk)) +
geom_path(data = dfWk, aes(Date, ShootingPctCumulativeWk), size = 1) +
geom_smooth(data = dfWk, aes(Date, ShootingPctWk, weight = TotalShotsWk), method = "lm", formula = y ~ x + log(x), color = "deepskyblue", se = F) +
geom_smooth(data = dfWk, aes(Date, ShootingPctWk, weight = TotalShotsWk), method = "lm", formula = y ~ x, color = "firebrick", se = F) +
scale_y_continuous(limits = c(0,1), breaks = c(0,.2,.4,.6,.8,1)) +
labs(list(y = "Shooting Percentage", title = "Shooting Percentage Over Time", subtitle = paste0("Cumulative Shot Pct: ", round(100 * dfWk$ShootingPctCumulative[length(dfWk$ShootingPctCumulative)], 2), "%", "     Current Predicted (lm): ", round(100 * lmW$fitted.values[length(lmW$fitted.values)], 2), "%"))) +
theme(legend.position = "none")
